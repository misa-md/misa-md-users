import * as React from "react";
import { Form, Row, Col, Select, Button, Radio, Alert } from "antd";
import { FormattedMessage } from "react-intl";
import { BugOutlined } from "@ant-design/icons";
import NewUsersForm from "./NewUsersForm";
import createPreview from "./createPreview";
import useVersions from "./hooks/useVersions";
import styles from "./IssueForm.module.scss";
import { Programs } from "./programs";
import PreviewModal from "./PreviewModal";

const { Option } = Select;

const params: any = window.location.search
  .slice(1)
  .split("&")
  .reduce((acc, param) => {
    const [key, value] = param.split("=");
    return { ...acc, [key]: value };
  }, {}); // tslint:disable-line

if (!params.repo) {
  params.repo = "misa-md";
}

interface IssueFormProps {
  onIssueTypeChanged: (type: string) => void;
}

const IssueForm: React.FC<IssueFormProps> = (props) => {
  const [form] = Form.useForm();

  const getContent = (type: string) =>
    createPreview(type, form.getFieldsValue());

  const [content, setContent] = React.useState("");
  const [preview, setPreview] = React.useState(false);
  const triggerPreview = (newPreview: boolean) => {
    setContent(getContent(form.getFieldValue("type")));
    setPreview(newPreview);
  };

  const formRef = React.useRef<HTMLDivElement | null>(null);
  const { repoVersions, fetchVersions } = useVersions();

  const bindModalHandler = React.useCallback(() => {
    formRef.current!.addEventListener("click", (e: Event) => {
      if ((e.target as any).getAttribute("href") === "#repro-modal") {
        e.preventDefault();
      }
    });
  }, []);

  // Load form data from localStorage
  const restoreValues = React.useCallback((omitFields: Array<string> = []) => {
    const cache = localStorage.getItem("form");
    if (cache) {
      const values = JSON.parse(cache);
      const keys = Object.keys(values);

      // Remove unless fields
      omitFields.forEach((key) => {
        delete values[key];
      });

      if (values.type) {
        form.setFieldsValue({
          type: values.type,
        });
      }

      // Next frame (IE 9 not support RAF)
      setTimeout(() => {
        // Remove useless value
        const currentValues = form.getFieldsValue();
        keys.forEach((key) => {
          if (!(key in currentValues)) {
            delete values[key];
          }
        });

        form.setFieldsValue(values);
      }, 100);
    }
    // eslint-disable-next-line
  }, []);

  const handleTypeChange = React.useCallback(() => {
    restoreValues(["type"]);
    props.onIssueTypeChanged(form.getFieldValue("type"));
    // eslint-disable-next-line
  }, []);

  const handleCreate = React.useCallback(() => {
    const issueType = form.getFieldValue("type");
    const title = encodeURIComponent(form.getFieldValue("title")).replace(
      /%2B/gi,
      "+"
    );
    const content = getContent(issueType);
    const withConfirm = `
- [ ] I have searched the [issues](https://github.com/misa-md/${repo}/issues) \
of this repository and believe that this is not a duplicate.

${content}
`;
    const withMarker = `${withConfirm}\n\n<!-- generated by misa-md-issue-helper. DO NOT REMOVE -->`;
    const body = encodeURIComponent(withMarker).replace(/%2B/gi, "+");
    const label =
      issueType === "feature" ? "&labels=ðŸ’¡%20Feature%20Request" : "";

    localStorage.clear();

    const submittRepo = `misa-md/misa-md-users`;
    window.open(
      `https://github.com/${submittRepo}/issues/new?title=${title}&body=${body}${label}`
    );
    // eslint-disable-next-line
  }, []);

  React.useEffect(() => {
    fetchVersions("misa-md/misa-md"); // todo: (params.repo);
    bindModalHandler();
    restoreValues();
    props.onIssueTypeChanged(form.getFieldValue("type"));
    // eslint-disable-next-line
  }, []);

  const onFormChanged = (_: any, values: any) => {
    let preForm = {};
    try {
      preForm = JSON.parse(localStorage.getItem("form") as string) || {};
    } catch (err) {
      // Do nothing
    }
    const cacheForm: any = {
      ...preForm,
    };
    Object.keys(values).forEach((key) => {
      if (values[key]) {
        cacheForm[key] = values[key];
      }
    });
    localStorage.setItem("form", JSON.stringify(cacheForm, null, 2));

    // change issue title:
    if (form.getFieldValue("type") === "new_user") {
      Object.keys(values).forEach((key) => {
        if (key === "new_user_org") {
          const org = form.getFieldValue("new_user_org");
          form.setFieldsValue({
            title: org ? "New User from " + org : "New User",
          });
        }
      });
    }
  };

  const repo = form.getFieldValue("repo");
  const versions = repoVersions[repo] || [];

  return (
    <div ref={formRef}>
      <Form
        form={form}
        layout="vertical"
        size="large"
        initialValues={{
          repo: params.repo,
          type: "new_user",
          version: versions[0],
        }}
        onFinish={() => {
          triggerPreview(true);
        }}
        onValuesChange={onFormChanged}
      >
        <PreviewModal
          visible={preview}
          content={content}
          onCancel={() => {
            triggerPreview(false);
          }}
          onCreate={handleCreate}
        />
        <Row>
          <Col span={11}>
            <Form.Item
              name="repos"
              label={
                <FormattedMessage
                  id="issue.program"
                  defaultMessage="I am opening an issue for"
                />
              }
              rules={[{ required: true }]}
              help={
                <FormattedMessage
                  id="issue.repoHelp"
                  defaultMessage="Please make sure to file the issue at appropriate repo."
                />
              }
            >
              <Select mode="multiple">
                {Programs.map((meta) => {
                  return (
                    <Option value={meta.users_repo}>{meta.display}</Option>
                  );
                })}
              </Select>
            </Form.Item>
          </Col>
          <Col span={12} offset={1}>
            <Form.Item
              name="type"
              label={
                <FormattedMessage id="issue.type" defaultMessage="This is a" />
              }
            >
              <Radio.Group
                onChange={handleTypeChange}
                className={styles.radioGroup}
              >
                <Radio.Button value="bug" disabled>
                  <FormattedMessage
                    id="issue.type.bug"
                    defaultMessage="Bug Report"
                  />
                </Radio.Button>
                <Radio.Button value="feature" disabled>
                  <FormattedMessage
                    id="issue.type.feature"
                    defaultMessage="Feature Request"
                  />
                </Radio.Button>
                <Radio.Button value="new_user">
                  <FormattedMessage
                    id="issue.type.new_user"
                    defaultMessage="New User"
                  />
                </Radio.Button>
              </Radio.Group>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item
          noStyle
          shouldUpdate={(prev, next) => prev.type !== next.type}
        >
          {() =>
            form.getFieldValue("type") === "feature" ? (
              <Alert message="Under development" type="warning" showIcon />
            ) : form.getFieldValue("type") === "bug" ? (
              <Alert message="Under development" type="warning" showIcon />
            ) : (
              <NewUsersForm />
            )
          }
        </Form.Item>
        <Form.Item>
          <div className={styles.submitBtn}>
            <Button
              type="primary"
              size="large"
              htmlType="submit"
              icon={<BugOutlined />}
            >
              <FormattedMessage id="issue.preview" defaultMessage="Preview" />
            </Button>
          </div>
        </Form.Item>
      </Form>
    </div>
  );
};

export default IssueForm;
